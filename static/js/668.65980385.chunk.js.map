{"version":3,"file":"static/js/668.65980385.chunk.js","mappings":"gKAAA,MAcMA,EAAgBC,GACb,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,MAChBD,EAAIJ,IAAMA,EACVI,EAAIE,OAAS,IAAMJ,EAAQE,GAC3BA,EAAIG,QAAUJ,CAAM,I,aChBxB,MAAMK,GAAiBC,EAAAA,EAAAA,OAAKC,IAAyD,IAAxD,IAAEV,EAAG,IAAEW,EAAG,UAAEC,EAAS,MAAEC,EAAQ,IAAG,OAAEC,EAAS,KAAKJ,EAC7E,MAAOK,EAAUC,IAAeC,EAAAA,EAAAA,UAAS,OAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAqB3C,OAnBAG,EAAAA,EAAAA,YAAU,KACUC,WAChB,UACQtB,EAAaC,GACnBgB,EAAYhB,GACZmB,GAAa,EACf,CAAE,MAAOG,GACPC,QAAQD,MAAM,uBAAwBA,GACtCH,GAAa,EACf,GAGFK,GAEO,KACLR,EAAY,KAAK,IAElB,CAAChB,KAGFyB,EAAAA,EAAAA,KAAA,OAAKb,UAAW,YAAYA,IAAYc,SACrCX,IACCU,EAAAA,EAAAA,KAAA,OACEzB,IAAKe,EACLJ,IAAKA,EACLgB,QAAQ,OACRf,UAAW,kDACTM,EAAY,YAAc,kBAI5B,IAIVV,EAAeoB,YAAc,iBAE7B,U,qHCtCMC,GAAcpB,EAAAA,EAAAA,OAAKC,IAAA,IAAC,KAAEoB,EAAI,KAAEC,EAAI,IAAEpB,EAAG,KAAEqB,GAAMtB,EAAA,OACjDuB,EAAAA,EAAAA,MAACC,EAAAA,EAAEC,EAAC,CACFL,KAAMA,EACNM,OAAO,SACPC,IAAI,sBACJzB,UAAU,2GACV0B,WAAY,CAAEC,MAAO,MACrBC,SAAU,CAAED,MAAO,KAAOb,SAAA,EAE1BD,EAAAA,EAAAA,KAAA,OAAKb,UAAU,wBAAuBc,UACpCD,EAAAA,EAAAA,KAACjB,EAAc,CACbR,IAAK+B,EACLpB,IAAKA,EACLE,MAAO,GACPC,OAAQ,GACRF,UAAU,oCAGda,EAAAA,EAAAA,KAAA,QAAMb,UAAU,UAASc,SAAEM,MACvB,IAGFS,GAAUhC,EAAAA,EAAAA,OAAK,KAEjBgB,EAAAA,EAAAA,KAAA,WACEiB,GAAG,UACH9B,UAAU,iGAAgGc,UAE1GO,EAAAA,EAAAA,MAACC,EAAAA,EAAES,IAAG,CACJC,QAAS,CAAEC,QAAS,EAAGC,EAAG,IAC1BC,YAAa,CAAEF,QAAS,EAAGC,EAAG,GAC9BE,WAAY,CAAEC,SAAU,IACxBC,SAAU,CAAEC,MAAM,GAClBvC,UAAU,qBAAoBc,SAAA,EAE9BD,EAAAA,EAAAA,KAAA,MAAIb,UAAU,uCAAsCc,SAAC,sDACrDO,EAAAA,EAAAA,MAAA,OAAKrB,UAAU,mCAAkCc,SAAA,EAC/CD,EAAAA,EAAAA,KAACI,EAAW,CACVC,KAAK,kCACLC,KAAMqB,EACNzC,IAAI,QACJqB,KAAK,8BAEPP,EAAAA,EAAAA,KAACI,EAAW,CACVC,KAAK,4BACLC,KAAMsB,EACN1C,IAAI,WACJqB,KAAK,4BAQjBS,EAAQb,YAAc,UACtB,S","sources":["utils/imageUtils.js","components/OptimizedImage.js","Contact.js"],"sourcesContent":["const createImagePlaceholder = (width, height, color = '#1f1f1f') => {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext('2d');\n  \n  if (ctx) {\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, width, height);\n  }\n  \n  return canvas.toDataURL('image/jpeg', 0.1);\n};\n\nconst preloadImage = (src) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.src = src;\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n  });\n};\n\nconst generateBlurHash = async (imageUrl) => {\n  try {\n    const img = await preloadImage(imageUrl);\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    if (!ctx) return null;\n    \n    canvas.width = 32; // низкое разрешение для блюра\n    canvas.height = (32 * img.height) / img.width;\n    \n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL('image/jpeg', 0.1);\n  } catch (error) {\n    console.error('Error generating blur hash:', error);\n    return null;\n  }\n};\n\nexport { createImagePlaceholder, preloadImage, generateBlurHash };","import React, { useState, useEffect, memo } from 'react';\nimport { preloadImage } from '../utils/imageUtils';\n\nconst OptimizedImage = memo(({ src, alt, className, width = 400, height = 300 }) => {\n  const [imageSrc, setImageSrc] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadImage = async () => {\n      try {\n        await preloadImage(src);\n        setImageSrc(src);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error loading image:', error);\n        setIsLoading(false);\n      }\n    };\n\n    loadImage();\n\n    return () => {\n      setImageSrc(null);\n    };\n  }, [src]);\n\n  return (\n    <div className={`relative ${className}`}>\n      {imageSrc && (\n        <img\n          src={imageSrc}\n          alt={alt}\n          loading=\"lazy\"\n          className={`w-full h-full transition-opacity duration-300 ${\n            isLoading ? 'opacity-0' : 'opacity-100'\n          }`}\n        />\n      )}\n    </div>\n  );\n});\n\nOptimizedImage.displayName = 'OptimizedImage';\n\nexport default OptimizedImage;","import React, { memo } from 'react';\nimport { m } from \"framer-motion\";\nimport OptimizedImage from './components/OptimizedImage';\nimport gmailIconPath from './icons/gmail-icon.png';\nimport telegramIconPath from './icons/telegram-icon.png';\n\nconst ContactLink = memo(({ href, icon, alt, text }) => (\n  <m.a\n    href={href}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    className=\"flex items-center gap-4 hover:scale-105 transition-transform bg-[#1f1f1f] p-4 rounded-lg w-full max-w-md\"\n    whileHover={{ scale: 1.05 }}\n    whileTap={{ scale: 0.95 }}\n  >\n    <div className=\"w-8 h-8 flex-shrink-0\">\n      <OptimizedImage\n        src={icon}\n        alt={alt}\n        width={32}\n        height={32}\n        className=\"w-full h-full object-contain\"\n      />\n    </div>\n    <span className=\"text-lg\">{text}</span>\n  </m.a>\n));\n\nconst Contact = memo(() => {\n  return (\n    <section\n      id=\"contact\"\n      className=\"snap-start min-h-screen bg-[#121212] text-white flex flex-col items-center justify-center px-6\"\n    >\n      <m.div\n        initial={{ opacity: 0, y: 20 }}\n        whileInView={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        viewport={{ once: true }}\n        className=\"text-center w-full\"\n      >\n        <h2 className=\"text-4xl font-bold mb-8 shimmer-text\">Контакты</h2>\n        <div className=\"flex flex-col gap-6 items-center\">\n          <ContactLink\n            href=\"mailto:gamleturusadze@gmail.com\"\n            icon={gmailIconPath}\n            alt=\"Gmail\"\n            text=\"gamleturusadze@gmail.com\"\n          />\n          <ContactLink\n            href=\"https://t.me/hamletsspeak\"\n            icon={telegramIconPath}\n            alt=\"Telegram\"\n            text=\"@hamletsspeak\"\n          />\n        </div>\n      </m.div>\n    </section>\n  );\n});\n\nContact.displayName = 'Contact';\nexport default Contact;\n"],"names":["preloadImage","src","Promise","resolve","reject","img","Image","onload","onerror","OptimizedImage","memo","_ref","alt","className","width","height","imageSrc","setImageSrc","useState","isLoading","setIsLoading","useEffect","async","error","console","loadImage","_jsx","children","loading","displayName","ContactLink","href","icon","text","_jsxs","m","a","target","rel","whileHover","scale","whileTap","Contact","id","div","initial","opacity","y","whileInView","transition","duration","viewport","once","gmailIconPath","telegramIconPath"],"sourceRoot":""}