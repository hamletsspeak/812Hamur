{"version":3,"file":"static/js/668.41fa8c96.chunk.js","mappings":"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","sources":["utils/imageUtils.js","components/OptimizedImage.js","Contact.js"],"sourcesContent":["const createImagePlaceholder = (width, height, color = '#1f1f1f') => {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  if (ctx) {\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width, height);\r\n  }\r\n  \r\n  return canvas.toDataURL('image/jpeg', 0.1);\r\n};\r\n\r\nconst preloadImage = (src) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.src = src;\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n};\r\n\r\nconst generateBlurHash = async (imageUrl) => {\r\n  try {\r\n    const img = await preloadImage(imageUrl);\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    if (!ctx) return null;\r\n    \r\n    canvas.width = 32; // низкое разрешение для блюра\r\n    canvas.height = (32 * img.height) / img.width;\r\n    \r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    return canvas.toDataURL('image/jpeg', 0.1);\r\n  } catch (error) {\r\n    console.error('Error generating blur hash:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { createImagePlaceholder, preloadImage, generateBlurHash };","import React, { useState, useEffect, memo } from 'react';\r\nimport { createImagePlaceholder, preloadImage, generateBlurHash } from '../utils/imageUtils';\r\n\r\nconst OptimizedImage = memo(({ src, alt, className, width = 400, height = 300 }) => {\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const [blurHash, setBlurHash] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Создаем базовый плейсхолдер\r\n    const placeholder = createImagePlaceholder(width, height);\r\n    setBlurHash(placeholder);\r\n\r\n    // Генерируем размытую версию изображения\r\n    generateBlurHash(src).then(hash => {\r\n      if (hash) setBlurHash(hash);\r\n    });\r\n\r\n    // Загружаем основное изображение\r\n    const loadImage = async () => {\r\n      try {\r\n        await preloadImage(src);\r\n        setImageSrc(src);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error loading image:', error);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadImage();\r\n\r\n    return () => {\r\n      setImageSrc(null);\r\n      setBlurHash(null);\r\n    };\r\n  }, [src, width, height]);\r\n\r\n  return (\r\n    <div className={`relative ${className}`} style={{ aspectRatio: width / height }}>\r\n      {blurHash && (\r\n        <img\r\n          src={blurHash}\r\n          alt={alt}\r\n          className={`absolute inset-0 w-full h-full transition-opacity duration-300 ${\r\n            isLoading ? 'opacity-100' : 'opacity-0'\r\n          }`}\r\n          style={{ objectFit: 'cover' }}\r\n        />\r\n      )}\r\n      {imageSrc && (\r\n        <picture>\r\n          <source srcSet={imageSrc.replace(/\\.(png|jpg|jpeg)$/, '.webp')} type=\"image/webp\" />\r\n          <img\r\n            src={imageSrc}\r\n            alt={alt}\r\n            loading=\"lazy\"\r\n            className={`absolute inset-0 w-full h-full transition-opacity duration-300 ${\r\n              isLoading ? 'opacity-0' : 'opacity-100'\r\n            }`}\r\n            style={{ objectFit: 'cover' }}\r\n          />\r\n        </picture>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nOptimizedImage.displayName = 'OptimizedImage';\r\n\r\nexport default OptimizedImage;","import React, { memo } from 'react';\r\nimport { m } from \"framer-motion\";\r\nimport OptimizedImage from './components/OptimizedImage';\r\nimport gmailIconPath from './icons/gmail-icon.png';\r\nimport telegramIconPath from './icons/telegram-icon.png';\r\n\r\nconst ContactLink = memo(({ href, icon, alt, text }) => (\r\n  <m.a\r\n    href={href}\r\n    target=\"_blank\"\r\n    rel=\"noopener noreferrer\"\r\n    className=\"flex items-center gap-2 hover:scale-105 transition-transform\"\r\n    whileHover={{ scale: 1.05 }}\r\n    whileTap={{ scale: 0.95 }}\r\n  >\r\n    <OptimizedImage\r\n      src={icon}\r\n      alt={alt}\r\n      width={32}\r\n      height={32}\r\n      className=\"w-8 h-8\"\r\n    />\r\n    <span className=\"text-lg\">{text}</span>\r\n  </m.a>\r\n));\r\n\r\nconst Contact = memo(() => {\r\n  return (\r\n    <section\r\n      id=\"contact\"\r\n      className=\"snap-start min-h-screen bg-[#121212] text-white flex flex-col items-center justify-center px-6\"\r\n    >\r\n      <m.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        whileInView={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.5 }}\r\n        viewport={{ once: true }}\r\n        className=\"text-center\"\r\n      >\r\n        <h2 className=\"text-4xl font-bold mb-8 shimmer-text\">Контакты</h2>\r\n        <div className=\"flex flex-col gap-6 items-center\">\r\n          <ContactLink\r\n            href=\"mailto:your.email@gmail.com\"\r\n            icon={gmailIconPath}\r\n            alt=\"Gmail\"\r\n            text=\"your.email@gmail.com\"\r\n          />\r\n          <ContactLink\r\n            href=\"https://t.me/your_telegram\"\r\n            icon={telegramIconPath}\r\n            alt=\"Telegram\"\r\n            text=\"@your_telegram\"\r\n          />\r\n        </div>\r\n      </m.div>\r\n    </section>\r\n  );\r\n});\r\n\r\nContact.displayName = 'Contact';\r\nexport default Contact;\r\n"],"names":["preloadImage","src","Promise","resolve","reject","img","Image","onload","onerror","OptimizedImage","memo","_ref","alt","className","width","height","imageSrc","setImageSrc","useState","blurHash","setBlurHash","isLoading","setIsLoading","useEffect","placeholder","color","arguments","length","undefined","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","toDataURL","createImagePlaceholder","async","imageUrl","drawImage","error","console","generateBlurHash","then","hash","loadImage","_jsxs","style","aspectRatio","children","_jsx","objectFit","srcSet","replace","type","loading","displayName","ContactLink","href","icon","text","m","a","target","rel","whileHover","scale","whileTap","Contact","id","div","initial","opacity","y","whileInView","transition","duration","viewport","once","gmailIconPath","telegramIconPath"],"sourceRoot":""}