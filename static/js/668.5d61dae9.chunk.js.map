{"version":3,"file":"static/js/668.5d61dae9.chunk.js","mappings":"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","sources":["utils/imageUtils.js","components/OptimizedImage.js","Contact.js"],"sourcesContent":["const createImagePlaceholder = (width, height, color = '#1f1f1f') => {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  const ctx = canvas.getContext('2d');\r\n  \r\n  if (ctx) {\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(0, 0, width, height);\r\n  }\r\n  \r\n  return canvas.toDataURL('image/jpeg', 0.1);\r\n};\r\n\r\nconst preloadImage = (src) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image();\r\n    img.src = src;\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n};\r\n\r\nconst generateBlurHash = async (imageUrl) => {\r\n  try {\r\n    const img = await preloadImage(imageUrl);\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    if (!ctx) return null;\r\n    \r\n    canvas.width = 32; // низкое разрешение для блюра\r\n    canvas.height = (32 * img.height) / img.width;\r\n    \r\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n    return canvas.toDataURL('image/jpeg', 0.1);\r\n  } catch (error) {\r\n    console.error('Error generating blur hash:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { createImagePlaceholder, preloadImage, generateBlurHash };","import React, { useState, useEffect, memo } from 'react';\r\nimport { preloadImage } from '../utils/imageUtils';\r\n\r\nconst OptimizedImage = memo(({ src, alt, className, width = 400, height = 300 }) => {\r\n  const [imageSrc, setImageSrc] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const loadImage = async () => {\r\n      try {\r\n        await preloadImage(src);\r\n        setImageSrc(src);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        console.error('Error loading image:', error);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    loadImage();\r\n\r\n    return () => {\r\n      setImageSrc(null);\r\n    };\r\n  }, [src]);\r\n\r\n  return (\r\n    <div className={`relative ${className}`}>\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={alt}\r\n          loading=\"lazy\"\r\n          className={`w-full h-full transition-opacity duration-300 ${\r\n            isLoading ? 'opacity-0' : 'opacity-100'\r\n          }`}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nOptimizedImage.displayName = 'OptimizedImage';\r\n\r\nexport default OptimizedImage;","import React, { memo } from 'react';\r\nimport { m } from \"framer-motion\";\r\nimport OptimizedImage from './components/OptimizedImage';\r\nimport gmailIconPath from './icons/gmail-icon.png';\r\nimport telegramIconPath from './icons/telegram-icon.png';\r\nimport {zoomRotateVariant, useScrollAnimation } from './config/animations';\r\nimport { useLanguage } from \"./contexts/LanguageContext\";\r\n\r\nconst ContactLink = memo(({ href, icon, alt, text }) => (\r\n  <m.a\r\n    href={href}\r\n    target=\"_blank\"\r\n    rel=\"noopener noreferrer\"\r\n    className=\"group flex items-center gap-4 bg-gradient-to-br from-[#2a2a2a] to-[#1a1a1a] p-6 rounded-xl w-full max-w-md border border-white/10 hover:border-blue-500/50 transition-all duration-300 shadow-lg relative overflow-hidden\"\r\n    initial={{ opacity: 0, x: -50 }}\r\n    whileInView={{ opacity: 1, x: 0 }}\r\n    viewport={{ once: true }}\r\n    transition={{\r\n      type: \"spring\",\r\n      stiffness: 400,\r\n      damping: 30,\r\n      mass: 0.8\r\n    }}\r\n  >\r\n    <m.div\r\n      className=\"absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"\r\n      initial={{ scale: 0 }}\r\n      whileHover={{ scale: 1 }}\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 400,\r\n        damping: 30\r\n      }}\r\n    />\r\n    <m.div \r\n      className=\"w-10 h-10 flex-shrink-0 bg-white/5 rounded-lg p-2 relative z-10\"\r\n      whileHover={{ rotate: 360 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      <OptimizedImage\r\n        src={icon}\r\n        alt={alt}\r\n        width={40}\r\n        height={40}\r\n        className=\"w-full h-full object-contain\"\r\n      />\r\n    </m.div>\r\n    <m.span \r\n      className=\"text-lg font-medium text-gray-200 group-hover:text-blue-400 transition-colors duration-300 relative z-10\"\r\n      whileHover={{ x: 5 }}\r\n      transition={{\r\n        type: \"spring\",\r\n        stiffness: 400,\r\n        damping: 25\r\n      }}\r\n    >\r\n      {text}\r\n    </m.span>\r\n  </m.a>\r\n));\r\n\r\nconst Contact = memo(() => {\r\n  const { t } = useLanguage();\r\n  return (\r\n    <section\r\n      id=\"contact\"\r\n      className=\"snap-start min-h-screen bg-[#121212] text-white flex flex-col items-center justify-center p-8\"\r\n    >\r\n      <div className=\"w-full max-w-4xl mx-auto text-center\">\r\n        <m.h2 \r\n          className=\"text-5xl sm:text-7xl font-bold mb-12 shimmer-text\"\r\n          variants={zoomRotateVariant}\r\n          {...useScrollAnimation()}\r\n        >\r\n          {t(\"contactsTitle\")}\r\n        </m.h2>\r\n        <m.p \r\n          className=\"text-xl text-gray-400 mb-8\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          whileInView={{ opacity: 1, y: 0 }}\r\n          viewport={{ once: true }}\r\n          transition={{ type: \"spring\", stiffness: 400, damping: 30 }}\r\n        >\r\n          {t(\"contactsText\")}\r\n        </m.p>\r\n        <div className=\"flex flex-col gap-6 items-center\">\r\n          <ContactLink\r\n            href=\"mailto:gamleturusadze@gmail.com\"\r\n            icon={gmailIconPath}\r\n            alt=\"Gmail\"\r\n            text=\"gamleturusadze@gmail.com\"\r\n          />\r\n          <ContactLink\r\n            href=\"https://t.me/hamletsspeak\"\r\n            icon={telegramIconPath}\r\n            alt=\"Telegram\"\r\n            text=\"@hamletsspeak\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n});\r\n\r\nContact.displayName = 'Contact';\r\nexport default Contact;\r\n"],"names":["preloadImage","src","Promise","resolve","reject","img","Image","onload","onerror","OptimizedImage","memo","_ref","alt","className","width","height","imageSrc","setImageSrc","useState","isLoading","setIsLoading","useEffect","async","error","console","loadImage","_jsx","children","loading","displayName","ContactLink","href","icon","text","_jsxs","m","a","target","rel","initial","opacity","x","whileInView","viewport","once","transition","type","stiffness","damping","mass","div","scale","whileHover","rotate","duration","span","Contact","t","useLanguage","id","h2","variants","zoomRotateVariant","useScrollAnimation","p","y","gmailIconPath","telegramIconPath"],"sourceRoot":""}